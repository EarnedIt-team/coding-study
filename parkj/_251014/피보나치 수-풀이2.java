/// 피보나치 : n-1 + n-2
/// 즉, 앞의 두 수들을 더해서 나오는 점화식(재귀적 규칙)이다.
/// 피보나치는 47번째로 넘어만 가면 int 범위(2,971,215,073)를 넘어가기에 int 범위 내에서 구하지 못함
/// int로 구현하기에는 사실상 안되기에 모듈러 연산을 사용해서 풀게 유도함
/// 1234567이라는 숫자는 그냥 넣은게 아니라, int 범위 내에 항상 값이 존재한다는것을 보장하기 위한 장치였던 것
/// 문제에서 해당 장치를 넣지 않았다면 거기에 맞게 조건이 수정되어야 했음 (자연수 n의 범위 혹은 int가 아닌 long으로 수정하거나..)

class Solution {
    public int solution(int n) {        
        if (n == 0) return 0; // F(0) = 0
        if (n == 1) return 1; // F(1) = 1
        
        int a = 0; // F(n-1)
        int b = 1; // F(n-2)
        int answer = 0; // F(n)
        
        /// a + b = answer
        /// F(n-1) + F(n-2) = F(n) 기준으로, 왼쪽으로 한칸씩 밀면서 받는다고 보면 쉽다(?)
        /// a는 F(n-2)값을 이어받고, b는 answer값을 이어받게 됨
        for (int i=2; i<=n; i++) {
            answer = (a+b) % 1234567; // 문제 그대로 "n번째 피보나치 수를 1234567로 나눈 나머지"
            a = b; // 다음 a는 앞서 구한 b (= F(n-2))과 동일함
            b = answer; // 다음 b는 앞서 구한 answer (= F(n))과 동일함
        }

        return answer;
    }
}